generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  price       Decimal  @db.Decimal(10, 2)
  stock       Int      @default(0)
  imageUrl    String?  @map("image_url")
  baseFee     Decimal  @default(2000) @map("base_fee") @db.Decimal(10, 2)
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relaciones
  transactions Transaction[]

  @@map("products")
}

model Customer {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  phone     String?
  createdAt DateTime @default(now()) @map("created_at")

  // Relaciones
  transactions Transaction[]

  @@map("customers")
}

model Transaction {
  id            Int      @id @default(autoincrement())
  customerId    Int      @map("customer_id")
  productId     Int      @map("product_id")
  
  // Montos
  productAmount Decimal  @map("product_amount") @db.Decimal(10, 2)
  baseFee       Decimal  @map("base_fee") @db.Decimal(10, 2)
  deliveryFee   Decimal  @map("delivery_fee") @db.Decimal(10, 2)
  totalAmount   Decimal  @map("total_amount") @db.Decimal(10, 2)
  
  // Estado: PENDING, COMPLETED, FAILED
  status        String   @default("PENDING")
  
 
  wompiTransactionId String? @map("wompi_transaction_id")
  wompiReference     String? @map("wompi_reference")
  
  // Datos de pago
  paymentMethod String? @map("payment_method") // CREDIT_CARD
  cardLastFour  String? @map("card_last_four")
  cardBrand     String? @map("card_brand") // VISA, MASTERCARD
  
  // Timestamps
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  completedAt DateTime? @map("completed_at")

  // Relaciones
  customer Customer @relation(fields: [customerId], references: [id])
  product  Product  @relation(fields: [productId], references: [id])
  delivery Delivery?

  @@map("transactions")
}

model Delivery {
  id            Int     @id @default(autoincrement())
  transactionId Int     @unique @map("transaction_id")
  
  // Direcci√≥n
  address    String
  city       String
  postalCode String? @map("postal_code")
  phone      String?
  
  // Costo y estado
  deliveryFee Decimal @map("delivery_fee") @db.Decimal(10, 2)
  status      String  @default("PENDING") // PENDING, ASSIGNED, DELIVERED
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relaciones
  transaction Transaction @relation(fields: [transactionId], references: [id])

  @@map("deliveries")
}